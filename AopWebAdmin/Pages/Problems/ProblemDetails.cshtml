@page "/Problems/{RequestedProblem}"
@using DatabaseConnector.Models
@using ProblemDetails = AopWebAdmin.Pages.ProblemDetails
@model AopWebAdmin.Pages.ProblemDetails
@{
    ViewData["Title"] = Model.RequestedProblem == "new" ? "New Problem" : "Problem : " + Model.RequestedProblem;
}

<div class="container mt-4">
    @if (Model.RequestedProblem == "new")
    {
        <h1 class="mb-4">Add New Problem</h1>
    }
    else
    {
        <h1 class="mb-4">Problem @Model.Problem.Id</h1>
        <form method="post" class="mb-4">
            <input type="hidden" asp-for="Action" value="@ProblemDetails.Actions.Delete" />
            <button type="submit" class="btn btn-danger">Delete</button>
        </form>
    }

    <form method="post">
        <div class="form-group mb-3">
            <button type="submit" class="btn btn-success">
                @if (Model.RequestedProblem == "new")
                {
                    <span>Add</span>
                }
                else
                {
                    <span>Update</span>
                }
            </button>
            <input type="hidden" asp-for="Action" value="@ProblemDetails.Actions.Update" />
        </div>

        <div class="form-group mb-3">
            <label asp-for="Problem.Id" class="form-label">Problem ID</label>
            <input asp-for="Problem.Id" class="form-control" placeholder="Enter Problem ID" />
            <span asp-validation-for="Problem.Id" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Problem.Source.Name" class="form-label">Source Name</label>
            <input asp-for="Problem.Source.Name" class="form-control" placeholder="Enter Source Name" />
            <span asp-validation-for="Problem.Source.Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Problem.Source.Url" class="form-label">Source Link</label>
            <input asp-for="Problem.Source.Url" class="form-control" placeholder="Enter Source URL" />
            <span asp-validation-for="Problem.Source.Url" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Problem.Points" class="form-label">Points</label>
            <input asp-for="Problem.Points" class="form-control" placeholder="Enter Points" />
            <span asp-validation-for="Problem.Points" class="text-danger"></span>
        </div>

        <div class="row mb-3">
            <div class="form-group col-sm">
                <label asp-for="Problem.Difficulty.Category" class="form-label">Difficulty Category</label>
                <input asp-for="Problem.Difficulty.Category" class="form-control" placeholder="Enter Difficulty Category" />
                <span asp-validation-for="Problem.Difficulty.Category" class="text-danger"></span>
            </div>
            <div class="form-group col-sm">
                <label asp-for="Problem.Difficulty.Hardness" class="form-label">Hardness</label>
                <input asp-for="Problem.Difficulty.Hardness" class="form-control" placeholder="Enter Hardness Level" />
                <span asp-validation-for="Problem.Difficulty.Hardness" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group mb-4">
            <div class="row">
                <div class="col-md">
                    <label asp-for="Problem.Descriptions.EnglishDescription.Content" class="form-label">English Statement</label>
                    <textarea oninput="textAreaAdjust(this)" style="overflow:hidden" id="englishStatement" asp-for="Problem.Descriptions.EnglishDescription.Content" class="form-control" placeholder="Write the problem statement in English"></textarea>
                    <span asp-validation-for="Problem.Descriptions.EnglishDescription.Content" class="text-danger"></span>
                </div>
                <div class="col-md">
                    <label class="form-label">Preview</label>
                    <div class="card">
                        <div class="card-body" id="englishStatementPreview">
                            @Model.Problem.Descriptions.EnglishDescription.Content
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group mb-4">
            <div class="row">
                <div class="col-md">
                    <label asp-for="Problem.Descriptions.ArabicDescription.Content" class="form-label">Arabic Statement</label>
                    <textarea oninput="textAreaAdjust(this)" style="direction: rtl; overflow:hidden" id="arabicStatement" asp-for="Problem.Descriptions.ArabicDescription.Content" class="form-control" placeholder="اكتب البيان بالعربية"></textarea>
                    <span asp-validation-for="Problem.Descriptions.ArabicDescription.Content" class="text-danger"></span>
                </div>
                <div class="col-md">
                    <label class="form-label">Preview</label>
                    <div class="card" style="direction: rtl">
                        <div class="card-body text-end" id="arabicStatementPreview">
                            @Model.Problem.Descriptions.ArabicDescription.Content
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let englishStatementPreview = document.getElementById("englishStatementPreview");
            let englishStatementInput = document.getElementById("englishStatement");
            textAreaAdjust(englishStatementInput);
            englishStatementInput.addEventListener("input", () => {
                englishStatementPreview.innerHTML = marked.parse(englishStatementInput.value);
                renderMathInElement(englishStatementPreview, {
                    delimiters: katexDelimiters,
                    throwOnError: false
                });
            });

            let arabicStatementPreview = document.getElementById("arabicStatementPreview");
            let arabicStatementInput = document.getElementById("arabicStatement");
            textAreaAdjust(arabicStatementInput);
            arabicStatementInput.addEventListener("input", () => {
                arabicStatementPreview.innerHTML = marked.parse(arabicStatementInput.value);
                renderMathInElement(arabicStatementPreview, {
                    delimiters: katexDelimiters,
                    throwOnError: false
                });
            });
        </script>

    </form>
</div>
